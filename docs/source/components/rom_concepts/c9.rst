
``LinearSubspace``
=======================

Header: ``<pressio/rom_concepts.hpp>``

.. code-block:: cpp

   namespace pressio{ namespace rom{

   template <class T>
   concept LinearSubspace =
          std::copy_constructible<T>
       && !std::assignable_from<T&, T>
       && std::copy_constructible<typename T::basis_matrix_type>
       && requires(const T & A)
       {
         { A.basis()         } -> std::same_as<const typename T::basis_matrix_type &>;
	 { A.dimension()     } -> std::integral;
	 { A.isColumnSpace() } -> std::convertible_to<bool>;
	 { A.isRowSpace()    } -> std::convertible_to<bool>;
       };

   }} // end namespace


Semantic requirements
---------------------

The concept is modeled only if it is satisfied,
all subsumed concepts are modeled and given
an instance ``s``, of type ``T``, all of the following hold:

- ``s`` is immutable and, consequently, so are the underlying basis
  and subspace it represents.

- let ``auto & basis = s.basis()``, then:

  - if ``s.isColumnSpace() == true``, then ``basis`` is full *column* rank

  - if ``s.isRowSpace() == true``, then ``basis`` is full *row* rank

- if ``s.isColumnSpace() == true``, then it ``s.isRowSpace() == false`` and vice versa

- ``auto dim = s.dimension()`` represents the true dimensionality of the subspace

- the basis represents a subspace that is closed under addition and scalar multiplication

Syntax only
-----------

.. literalinclude:: ./syntax_only_subspaces_concepts.cc
   :language: cpp
   :lines: 8-16

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_rom_galerkin_hypred" kind="page">
    <compoundname>md_pages_components_rom_galerkin_hypred</compoundname>
    <title>rom: Galerkin: hyper-reduced problem</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Defined in: <computeroutput>&lt;pressio/rom_galerkin.hpp&gt;</computeroutput></para>
<para>Public namespace: <computeroutput>pressio::rom</computeroutput>, <computeroutput>pressio::rom::galerkin</computeroutput>.</para>
<sect1 id="md_pages_components_rom_galerkin_hypred_1autotoc_md107">
<title>Overview</title>
<para>At a high level, using a Galerkin problem involces three steps:<orderedlist>
<listitem><para><emphasis>create</emphasis>: you create an instance of a &quot;default Galerkin problem&quot;</para>
</listitem><listitem><para><emphasis>extract</emphasis>: you extract the underlying stepper object owned by the problem</para>
</listitem><listitem><para><emphasis>solve</emphasis>: you use the stepper to solve in time the Galerkin problem</para>
</listitem></orderedlist>
</para>
<para>You should now pause and think for a second about the steps above. What does a stepper have to do with a Galerkin ROM? The answer is that practically speaking, at the lowest-level, a Galerkin problem can be reduced to simply a &quot;custom&quot; stepper to advance in time. This is exactly how pressio implements this and the reason why a Galerkin problem contains a stepper object inside: when you create the problem, pressio creates the appropriate custom stepper object that you can use. You don&apos;t need to know how this is done, or rely on the details, because these are problem- and implementation-dependent, and we reserve the right to change this in the future.</para>
</sect1>
<sect1 id="md_pages_components_rom_galerkin_hypred_1autotoc_md108">
<title>1. Creating a problem instance</title>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">StepperTag,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FomSystemType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">DecoderType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RomStateType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FomReferenceStateType,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ProjectorType</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>create_hyperreduced_problem(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FomSystemType<sp/>&amp;<sp/>fomSysObj,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DecoderType<sp/>&amp;<sp/>decoder,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RomStateType<sp/>&amp;<sp/>stateIn,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FomReferenceStateType<sp/>&amp;<sp/>fomRef,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ProjectorType<sp/>&amp;<sp/>probjector);</highlight></codeline>
</programlisting></para>
<para>where <computeroutput>StepperTag</computeroutput> is a tag type from the ode to specify which time scheme to use. This function returns an instance of the desired Galerkin problem.</para>
<sect2 id="md_pages_components_rom_galerkin_hypred_1autotoc_md109">
<title>Parameters and Requirements</title>
<para><itemizedlist>
<listitem><para><computeroutput>StepperTag</computeroutput>:<itemizedlist>
<listitem><para>tag type to specify the time scheme</para>
</listitem><listitem><para>must be one of the explicit or implicit tag types supported in <computeroutput>pressio::ode</computeroutput></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>FomSystemType</computeroutput>:<itemizedlist>
<listitem><para>your adapter class type specifying the FOM problem</para>
</listitem><listitem><para>must satisfy one of the APIs suitable for Galerkin, see <ulink url="./md_pages_components_rom_fom_apis.html">API list</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>DecoderType</computeroutput>:<itemizedlist>
<listitem><para>decoder class type</para>
</listitem><listitem><para>must satify the requirements listed <ulink url="md_pages_components_rom_decoder.html">here</ulink></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>RomStateType</computeroutput>:<itemizedlist>
<listitem><para>ROM state type</para>
</listitem><listitem><para>currently, it must be either an Eigen vector or a Kokkos 1D view</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>FomReferenceStateType</computeroutput>:<itemizedlist>
<listitem><para>your FOM reference state that is used when reconstructing the FOM state</para>
</listitem><listitem><para>must be copy-constructible and the following must be true:<linebreak/>
 <programlisting filename=".cpp"><codeline><highlight class="normal">std::is_same&lt;FomReferenceStateType,<sp/>typename<sp/>DecoderType::fom_state_type&gt;::value<sp/>==<sp/></highlight><highlight class="keyword">true</highlight></codeline>
</programlisting></para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>ProjectorType</computeroutput>:<itemizedlist>
<listitem><para>an operator is responsible for projectng the FOM operators onto the reduced space</para>
</listitem><listitem><para>must be a functor with a specific API, see details below</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</sect2>
<sect2 id="md_pages_components_rom_galerkin_hypred_1autotoc_md110">
<title>Problem class API</title>
<para>An instance of the hyper-reduced Galerkin problem meets the same API as the <ulink url="md_pages_components_rom_galerkin_default.html">default problem</ulink>.</para>
<para>A hyper-reduced Galerkin problem has these traits:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>problem<sp/>=<sp/>create_default_problem(...);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>traits<sp/>=<sp/>pressio::Traits&lt;decltype(problem)&gt;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>explicit<sp/>case,<sp/>one<sp/>can<sp/>access<sp/>the<sp/>following<sp/>traits:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::fom_system_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::scalar_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::decoder_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::decoder_jac_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::galerkin_state_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::galerkin_velocity_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::projector_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::stepper_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>for<sp/>the<sp/>implicit<sp/>case<sp/>one<sp/>has:</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::fom_system_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::scalar_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::decoder_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::decoder_jac_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::galerkin_state_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::galerkin_residual_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::galerkin_jacobian_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::projector_type;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>traits::stepper_type;</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_pages_components_rom_galerkin_hypred_1autotoc_md111">
<title>Projector</title>
<para> <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>: explain what projectos is for since it is critical.</para>
<para>The projector must be a functor as follows:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ValidProjector</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>operand_type,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TimeType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ResultType&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>operand_type<sp/>&amp;<sp/>operand,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeType<sp/>time,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultType<sp/>&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>projection<sp/>to<sp/>the<sp/>operand,<sp/>store<sp/>into<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>Note that here the <computeroutput>operator()</computeroutput> is templated on the operand because the projector can be called with different arguments depending on whether you are selected an explicit or implicit Galerkin problem:<itemizedlist>
<listitem><para>for explicit: the projector <emphasis>always</emphasis> receives as operand argument an instance of your FOM velocity</para>
</listitem><listitem><para>for implicit: the operand is an instance of your FOM velocity as well as an instance of the decoder&apos;s Jacobian.</para>
</listitem></itemizedlist>
</para>
<para>You are responsible to handle the various cases. Obviously, you are not required to template the operand. If you are working with specific types, you can simply specialize it. For example, suppose that you are working with an application that uses for the velocity a type named <computeroutput>FomVelocityType</computeroutput>, and for the decoder&apos;s Jacobian you are using a type named <computeroutput>ADenseMatrixType</computeroutput>. In such case, a valid projector can be written as:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ValidProjector</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TimeType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ResultType&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>FomVelocityType<sp/>&amp;<sp/>operand,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeType<sp/>time,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultType<sp/>&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>projection<sp/>to<sp/>the<sp/>operand,<sp/>store<sp/>into<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>TimeType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>ResultType&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ADenseMatrixType<sp/>&amp;<sp/>operand,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TimeType<sp/>time,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ResultType<sp/>&amp;<sp/>result)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline><highlight class="keyword"><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>apply<sp/>the<sp/>projection<sp/>to<sp/>the<sp/>operand,<sp/>store<sp/>into<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>The compiler will select the best match. Note that the result is NOT templated. In general, you can safely assume that <computeroutput>result</computeroutput> is indexable as <computeroutput>(i,...)</computeroutput>.  <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span> describe this more </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="pages/components/rom_galerkin_hypred.md"/>
  </compounddef>
</doxygen>

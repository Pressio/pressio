<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.20" xml:lang="en-US">
  <compounddef id="md_pages_getstarted_components" kind="page">
    <compoundname>md_pages_getstarted_components</compoundname>
    <title>Components/packages</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The functionalities inside the C++ library are organized into several packages:</para>
<para><itemizedlist>
<listitem><para><ulink url="https://github.com/Pressio/pressio/tree/master/packages/mpl/src"><lsquo/>mpl<rsquo/></ulink>: metaprogramming functionalities;</para>
</listitem><listitem><para><computeroutput>utils</computeroutput>: common functionalities, e.g., I/O helpers, static constants, etc;</para>
</listitem><listitem><para><computeroutput>containers</computeroutput>: data strutures wrappers;</para>
</listitem><listitem><para><computeroutput>ops</computeroutput>: linear algebra;</para>
</listitem><listitem><para><computeroutput>apps</computeroutput>: suites of mini-apps used for basic testing;</para>
</listitem><listitem><para><computeroutput>qr</computeroutput>: QR factorization functionalities;</para>
</listitem><listitem><para><computeroutput>svd</computeroutput>: singular value decomposition (SVD) functionalities;</para>
</listitem><listitem><para><computeroutput>solvers</computeroutput>: linear and non-linear solvers (e.g. Gauss-Newton with and without line-search, etc.);</para>
</listitem><listitem><para><computeroutput>ode</computeroutput>: explicit and implict time steppers and integrators;</para>
</listitem><listitem><para><computeroutput>rom</computeroutput>: reduced-order modeling algorithms.</para>
</listitem></itemizedlist>
</para>
<para>The top-down order used above is informative of the packages&apos; dependency structure and mutual visibility. For example, every package depends on <computeroutput>mpl</computeroutput>, but <computeroutput>qr</computeroutput> depends only on <computeroutput>mpl</computeroutput>, <computeroutput>utils</computeroutput>, <computeroutput>containers</computeroutput>. At the bottom of the hierarchy we have the <computeroutput>rom</computeroutput> package which requires all the others. Each package contains corresponding unit- and regular tests. Splitting the framework into separate packages has several benefits.<itemizedlist>
<listitem><para>Maintability: <computeroutput>pressio</computeroutput> can be more easily developed and maintained since packages depend on one another through well-defined public interfaces, and appropriate namespaces are used to organize classes within each package.</para>
</listitem><listitem><para>Selective usability: This modular framework allows users, if needed, to leverage invidual packages. For instance, if a user needs/wants just the QR methods, they simply use that package, and all the dependencies are enabled automatically. </para>
</listitem></itemizedlist>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_linsolvers" kind="page">
    <compoundname>md_pages_components_linsolvers</compoundname>
    <title>Linear solvers</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-default" /></para>
<para><parblock><para>Defined in header <computeroutput>&lt;pressio/solvers_linear.hpp&gt;</computeroutput></para>
<para>Public namespace: <computeroutput>pressio::linearsolvers</computeroutput> </para>
</parblock></para>
<sect1 id="md_pages_components_linsolvers_1autotoc_md3">
<title>Overview</title>
<para>We clearly state upfront that this component of pressio is not a self-contained, general purpose library of linear solvers implemented from scratch. In the future, we might revise this, but for now it is an <bold>intentional</bold> choice: there exist already many open-source highly-optimized libraries that provide linear solvers for both shared-memory, e.g. Armadillo, Eigen, Blaze, Magma, LAPACK, and distributed environment, e.g. Trilinos, PETSc, HYPRE.</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-info" /></para>
<para><parblock><para>The primary goal of the pressio&apos;s linear solvers is to support usecases that are needed for ROMs. As discussed in the introduction, ROMs involve &quot;small&quot; <emphasis>dense</emphasis> systems that suitably fit on a <emphasis>single compute node</emphasis>. Pressio&apos;s linear solvers are thus designed and implemented to be wrappers (exposing a common interface) to existing shared-memory linear solvers libraries. </para>
</parblock></para>
<para>Currently, we support linear systems using either Eigen or Kokkos containers. The reason for this is that Eigen and Kokkos are the supported and preferred choices (for now) to implement ROMs operators. Kokkos, in particular, allows to operate both on host and GPUs. Later on, we can easily extend support to other libraries if needed. Note that even if the scope of the linear solvers is limited, we still emphasize that, like all of the others subpackages in pressio, it can be used idenpendetly.</para>
<sect2 id="md_pages_components_linsolvers_1autotoc_md4">
<title>Why do we need it?</title>
<para> <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>: explain that we need to a uniform interface.</para>
</sect2>
</sect1>
<sect1 id="md_pages_components_linsolvers_1autotoc_md5">
<title>API</title>
<para><programlisting filename=".cpp"><codeline><highlight class="normal">pressio::linearsolvers::Solver&lt;Tag,<sp/>MatrixType&gt;;</highlight></codeline>
</programlisting></para>
<para><itemizedlist>
<listitem><para><computeroutput>Tag</computeroutput>: tag type specifying which type of solver to use (more on this below)</para>
</listitem><listitem><para><computeroutput>MatrixType</computeroutput>: data type of the matrix of the linear system to solve (used to choose the proper specialization).</para>
</listitem></itemizedlist>
</para>
<para>We distinguish between iterative and direct solvers. Obviously, depending on the structure of the matrix, some methods might not be applicable or might not be efficient.</para>
<para><table rows="11" cols="3"><row>
<entry thead="yes"><para>Tag   </para>
</entry><entry thead="yes"><para>Description   </para>
</entry><entry thead="yes"><para>Works for:    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>iterative::CG</computeroutput>   </para>
</entry><entry thead="no"><para>Conjugate-gradient   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>iterative::Bicgstab</computeroutput>   </para>
</entry><entry thead="no"><para>Biconjugate gradient stabilized   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>iterative::LSCG</computeroutput>   </para>
</entry><entry thead="no"><para>Conjugate-gradient   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::HouseholderQR</computeroutput>   </para>
</entry><entry thead="no"><para>Uses on householder QR   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::ColPivHouseholderQR</computeroutput>   </para>
</entry><entry thead="no"><para>Uses on Householder QR with pivoting   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::PartialPivLU</computeroutput>   </para>
</entry><entry thead="no"><para>Uses LU factorization with partial pivoting   </para>
</entry><entry thead="no"><para>Eigen    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::potrsL</computeroutput>   </para>
</entry><entry thead="no"><para>Uses Cholesky, lower part   </para>
</entry><entry thead="no"><para>Kokkos    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::potrsU</computeroutput>   </para>
</entry><entry thead="no"><para>Uses Cholesky, upper part   </para>
</entry><entry thead="no"><para>Kokkos    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::getrs</computeroutput>   </para>
</entry><entry thead="no"><para>Uses LU factorization   </para>
</entry><entry thead="no"><para>Kokkos    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>direct::geqrf</computeroutput>   </para>
</entry><entry thead="no"><para>Uses QR fatorization   </para>
</entry><entry thead="no"><para>Kokkos   </para>
</entry></row>
</table>
</para>
</sect1>
<sect1 id="md_pages_components_linsolvers_1autotoc_md6">
<title>Class Synopsis</title>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>MatrixType&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LinearSolver</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>matrix_type<sp/>=<sp/>MatrixType;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StateType,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>RhsType&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>solve(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>MatrixType<sp/>&amp;<sp/>A,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>RhsType<sp/>&amp;<sp/>b,<sp/>StateType<sp/>&amp;<sp/>x);</highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
</sect1>
<sect1 id="md_pages_components_linsolvers_1autotoc_md7">
<title>Example Usage</title>
<para> <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>: need to discuss difference between iterative and direct</para>
<para><programlisting filename=".cpp"><codeline><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>want<sp/>to<sp/>solve<sp/>`Ax<sp/>=<sp/>b`</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>matrix_type<sp/>=<sp/>Eigen::MatrixXd;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>vector_type<sp/>=<sp/>Eigen::VectorXd;</highlight></codeline>
<codeline><highlight class="normal">matrix_type<sp/>A(10,<sp/>10);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fill<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">vector_type<sp/>b(10);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>fill<sp/>b</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pls<sp/><sp/>=<sp/>pressio::linearsolvers;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>tag<sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>pls::direct::HouseholderQr;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>solver_t<sp/>=<sp/>pls::Solver&lt;tag,<sp/>matrix_type&gt;;</highlight></codeline>
<codeline><highlight class="normal">solver<sp/>mySolver;</highlight></codeline>
<codeline><highlight class="normal">vector_type<sp/>x(10);</highlight></codeline>
<codeline><highlight class="normal">mySolver.solve(A,<sp/>b,<sp/>x);</highlight></codeline>
</programlisting> </para>
</sect1>
    </detaileddescription>
    <location file="pages/components/linsolvers.md"/>
  </compounddef>
</doxygen>

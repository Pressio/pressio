<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_type_traits" kind="page">
    <compoundname>md_pages_components_type_traits</compoundname>
    <title>type_traits</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-note m-default" /></para>
<para><parblock><para>Defined in header: <computeroutput>&lt;pressio/type_traits.hpp&gt;</computeroutput></para>
<para>Public namespace: <computeroutput>pressio</computeroutput> </para>
</parblock></para>
<sect1 id="md_pages_components_type_traits_1autotoc_md141">
<title>Overview</title>
<para>Provides functionalities for type support and detection. One of the main design features of pressio is that it supports arbitrary types via generic programming and type introspection, but also provides special support for some data types commonly used.</para>
<para><linebreak/>
</para>
</sect1>
<sect1 id="md_pages_components_type_traits_1autotoc_md142">
<title>Traits class</title>
<para> <mcss:span xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-text m-danger">todo</mcss:span>: finish</para>
<para>One of the most important things inside <computeroutput>type_traits</computeroutput> is the <computeroutput>Traits</computeroutput> class:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pressio{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para>
<para>To understand the purpose and usage of the traits pattern in C++ there are several resources online. Quoting Bjarne Stroustrup: "Think of a trait as a small object whose main purpose is to carry information used by another object or algorithm to determine &quot;policy&quot; or &quot;implementation details&quot;. Pressio uses specializations of this class to gather <emphasis>in a uniform way</emphasis> compile-time information enabling it to reason about types. The key point here is that <emphasis>different TPLs use a variety of naming conventions for nested typedefs and related things</emphasis>, so there is not easy way to access similar information from types of various libraries. This is what motivated us to implement this <computeroutput>type_traits</computeroutput> component. We need a standard, uniform way to query types for compile-time information. We currently have traits specialized for types of a few TPLs, like Trilinos, Kokkos, Eigen. An example of <ulink url="https://github.com/Pressio/pressio/blob/main/include/pressio/type_traits/traits_vector.hpp">one such specialization</ulink> (in this case for Eigen) is:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Traits&lt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>T,<sp/>::pressio::mpl::enable_if_t&lt;is_dynamic_vector_eigen&lt;T&gt;::value&gt;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>&gt;</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_static<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_dynamic<sp/><sp/>=<sp/>!is_static;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>scalar_type<sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::Scalar;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>size_type<sp/><sp/><sp/><sp/><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::StorageIndex;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference_type<sp/>=<sp/>scalar_type<sp/>&amp;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>const_reference_type<sp/>=<sp/>scalar_type<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>&amp;;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>some<sp/>other<sp/>things</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">};</highlight></codeline>
</programlisting></para>
<para>This <computeroutput>Traits</computeroutput> class play a key role when users want to use arbitrary types (i.e. types which are not known to presso) and to do so, users shoud specialize this class and make these specialization visibile to pressio to provide information about their generic types. <linebreak/>
</para>
<para>For practical examples of how this class is used, see:<itemizedlist>
<listitem><para><ulink url="md_pages_components_nonlinsolvers_nr.html">Newton-Raphson solver</ulink></para>
</listitem><listitem><para><ulink url="md_pages_components_ode_steppers_explicit.html">ode explicit steppers</ulink></para>
</listitem><listitem><para><ulink url="md_pages_components_ode_steppers_implicit.html">ode implicit steppers</ulink></para>
</listitem></itemizedlist>
</para>
<para><linebreak/>
</para>
</sect1>
<sect1 id="md_pages_components_type_traits_1autotoc_md143">
<title>Type detection and identification</title>
<para>We support several metafunctions for detecting data types commonly used from existing TPLs. The following list is partial, and more will be added as we continue the development.</para>
<para><table rows="22" cols="2"><row>
<entry thead="yes"><para>Name   </para>
</entry><entry thead="yes"><para>Description    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_static_vector_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static Eigen vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dynamic_vector_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dynamic Eigen vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_vector_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static or dynamic Eigen vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_sparse_matrix_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static or dynamic sparse Eigen matrix. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_static_dense_matrix_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static dense Eigen matrix. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dynamic_dense_matrix_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dynamic dense Eigen matrix. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dense_matrix_eigen;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static or dynamic dense Eigen matrix. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_EIGEN==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dense_vector_teuchos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dense Teuchos vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dense_matrix_teuchos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dense Teuchos matrix. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_vector_epetra;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is Epetra vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_multi_vector_epetra;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is an Epetra multi vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_vector_tpetra;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a Tpetra vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_multi_vector_tpetra;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a Tpetra multi vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_vector_tpetra_block;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a Tpetra-block vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_multi_vector_tpetra_block;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a Tpetra-block multi vector. <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_TRILINOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_static_vector_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static Kokkos vector (rank-1 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dynamic_vector_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dynamic Kokkos vector (rank-1 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_vector_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static or dynamic Kokkos vector (rank-1 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_static_dense_matrix_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static dense Kokkos matrix (rank-2 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dynamic_dense_matrix_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a dynamic dense Kokkos matrix (rank-2 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>    </para>
</entry></row>
<row>
<entry thead="no"><para><computeroutput>template&lt;class T&gt;</computeroutput> <linebreak/>
 <computeroutput>struct is_dense_matrix_kokkos;</computeroutput>   </para>
</entry><entry thead="no"><para>Provides static member constant <computeroutput>value</computeroutput> equal to <computeroutput>true</computeroutput> <linebreak/>
 if <computeroutput>T</computeroutput> is a static or dynamic dense Kokkos matrix (rank-2 View). <linebreak/>
 Requires: <computeroutput>PRESSIO_ENABLE_TPL_KOKKOS==On</computeroutput>   </para>
</entry></row>
</table>
</para>
</sect1>
    </detaileddescription>
    <location file="pages/components/type_traits.md"/>
  </compounddef>
</doxygen>

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="md_pages_components_utils" kind="page">
    <compoundname>md_pages_components_utils</compoundname>
    <title>utils</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Defined in header: <computeroutput>&lt;pressio/utils.hpp&gt;</computeroutput></para>
<para>Public namespaces: <computeroutput>pressio</computeroutput> and <computeroutput>pressio::utils</computeroutput>.</para>
<sect1 id="md_pages_components_utils_1autotoc_md85">
<title>Logger</title>
<para>One of the main functionalities inside <computeroutput>utils</computeroutput> is the logger. To implement the pressio logging functionalities, we have used <ulink url="https://github.com/gabime/spdlog">spdlog</ulink>, and rewritten a subset of it, for example to work seamlessly with MPI.</para>
<para> <mcss:class xmlns:mcss="http://mcss.mosra.cz/doxygen/" mcss:class="m-block m-warning" /></para>
<para><simplesect kind="par"><title>By default all logging is disabled.</title><para>If you just <computeroutput>#include&lt;pressio/utils.hpp&gt;</computeroutput> and expect logging, you will be disappointed! By default, all logging is disabled for performance reasons. To enable and use it, you need to do two things:<orderedlist>
<listitem><para>place a <computeroutput>define</computeroutput> statement to set the desired level: note that this define statement <emphasis>must</emphasis> be placed <emphasis>before</emphasis> including the utils header.</para>
</listitem><listitem><para>you need to start and finalize the logger singleton.</para>
</listitem></orderedlist>
</para>
</simplesect>
As follows: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>this<sp/>sets<sp/>the<sp/>default<sp/>min<sp/>level</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_ACTIVE_MIN_LEVEL<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>this<sp/>is<sp/>needed<sp/>to<sp/>include<sp/>the<sp/>logger<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;pressio/utils.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">plog<sp/><sp/><sp/>=<sp/>pressio::log;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plog::initialize(pressio::logto::terminal);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>your<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>plog::finalize();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting> In this case, we set the level to 2, which means &quot;info&quot;-level logging. The supported levels are:</para>
<para><programlisting filename=".cpp"><codeline><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_TRACE<sp/><sp/><sp/><sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_DEBUG<sp/><sp/><sp/><sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_INFO<sp/><sp/><sp/><sp/><sp/><sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_WARN<sp/><sp/><sp/><sp/><sp/><sp/>3</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_ERROR<sp/><sp/><sp/><sp/><sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_CRITICAL<sp/><sp/>5</highlight></codeline>
<codeline><highlight class="preprocessor">#define<sp/>PRESSIO_LOG_LEVEL_OFF<sp/><sp/><sp/><sp/><sp/><sp/><sp/>6</highlight></codeline>
</programlisting></para>
<sect2 id="md_pages_components_utils_1autotoc_md86">
<title>Resetting the level</title>
<para>If you want, you can use the define statement to set the min level, but then are runtime reset it as follows: <programlisting filename=".cpp"><codeline><highlight class="comment">//<sp/>your<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">plog::setVerbosity({plog::level::info});</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>...</highlight></codeline>
</programlisting></para>
</sect2>
<sect2 id="md_pages_components_utils_1autotoc_md87">
<title>The loggin macros</title>
<para>To actually issue log statements, you use the macros as in the following example: <programlisting filename=".cpp"><codeline><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>main()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>1.1;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PRESSIOLOG_TRACE(</highlight><highlight class="stringliteral">&quot;my<sp/>value<sp/>is&quot;</highlight><highlight class="normal">,<sp/>a,<sp/></highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>PRESSIOLOG_DEBUG(&quot;</highlight><highlight class="normal">my<sp/>value<sp/>is</highlight><highlight class="stringliteral">&quot;,<sp/>a,<sp/>&quot;</highlight><highlight class="normal"><sp/>but<sp/>I<sp/>am<sp/>debug</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>PRESSIOLOG_INFO(&quot;</highlight><highlight class="normal">my<sp/>value<sp/>is</highlight><highlight class="stringliteral">&quot;,<sp/>a,<sp/>&quot;</highlight><highlight class="normal"><sp/>but<sp/>I<sp/>am<sp/>info</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>PRESSIOLOG_WARN(&quot;</highlight><highlight class="normal">my<sp/>value<sp/>is</highlight><highlight class="stringliteral">&quot;,<sp/>a,<sp/>&quot;</highlight><highlight class="normal"><sp/>but<sp/>I<sp/>am<sp/>warn</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>PRESSIOLOG_ERROR(&quot;</highlight><highlight class="normal">my<sp/>value<sp/>is</highlight><highlight class="stringliteral">&quot;,<sp/>a,<sp/>&quot;</highlight><highlight class="normal"><sp/>but<sp/>I<sp/>am<sp/>an<sp/>error<sp/>level</highlight><highlight class="stringliteral">&quot;);</highlight></codeline>
<codeline><highlight class="stringliteral"><sp/><sp/>PRESSIOLOG_CRITICAL(&quot;</highlight><highlight class="normal">my<sp/>value<sp/>is</highlight><highlight class="stringliteral">&quot;,<sp/>55.6,<sp/>&quot;</highlight><highlight class="normal"><sp/>but<sp/>don</highlight><highlight class="stringliteral">&apos;t<sp/>forget<sp/>);</highlight></codeline>
<codeline><highlight class="stringliteral">}</highlight></codeline>
</programlisting></para>
<para>The log statements issued for a specific level will be printed <emphasis>only if</emphasis> <computeroutput>PRESSIO_LOG_ACTIVE_MIN_LEVEL</computeroutput> is greater or equal than that level. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="pages/components/utils.md"/>
  </compounddef>
</doxygen>


#ifndef ROMPP_APPS_TEST_UNSTEADY_NONLIN_ADVDIFFREACTION_FLAME_2D_GOLD_IMPLICIT_HPP_
#define ROMPP_APPS_TEST_UNSTEADY_NONLIN_ADVDIFFREACTION_FLAME_2D_GOLD_IMPLICIT_HPP_

#include "ODE_ALL"

namespace rompp { namespace apps{ namespace test{

template <ode::ImplicitEnum>
struct NonLinAdvDiffReacFlame2dImpGoldStates;

template <>
struct NonLinAdvDiffReacFlame2dImpGoldStates<ode::ImplicitEnum::Euler>{
  using result_t = std::vector<double>;

  static result_t get(int Nx, int Ny,
		      double dt, double final_t){
    if(Nx==12 and Ny==6 and
       std::abs(dt-0.0001)<1e-6 and
       std::abs(final_t-0.001)<1e-6)
      {
      return{
		300.73567068555610,
		  0.00003083372043,
		  0.00024702012259,
		  0.00000201625345,
		300.21076574271092,
		  0.00000895151378,
		  0.00007171130939,
		  0.00000035831707,
		300.03069393162292,
		  0.00000131194514,
		  0.00001050992430,
		  0.00000003667239,
		300.00323974086535,
		  0.00000013899573,
		  0.00000111347665,
		  0.00000000290260,
		300.00027865947010,
		  0.00000001198435,
		  0.00000009600444,
		  0.00000000019582,
		300.00002070213020,
		  0.00000000089181,
		  0.00000000714413,
		  0.00000000001180,
		300.00000137513950,
		  0.00000000005931,
		  0.00000000047511,
		  0.00000000000065,
		300.00000008355101,
		  0.00000000000361,
		  0.00000000002889,
		  0.00000000000003,
		300.00000000471829,
		  0.00000000000020,
		  0.00000000000163,
		  0.00000000000000,
		300.00000000025057,
		  0.00000000000001,
		  0.00000000000009,
		  0.00000000000000,
		300.00000000001262,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000040,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		312.31482259190221,
		  0.00050453449321,
		  0.00404225677792,
		  0.00005536308999,
		302.70011643621035,
		  0.00011346820330,
		  0.00090902854687,
		  0.00000684199609,
		300.33562755708249,
		  0.00001426256485,
		  0.00011425840563,
		  0.00000055570500,
		300.03148334364403,
		  0.00000134599136,
		  0.00001078266042,
		  0.00000003704866,
		300.00245913938591,
		  0.00000010551809,
		  0.00000084529140,
		  0.00000000217944,
		300.00016818245410,
		  0.00000000723360,
		  0.00000005794703,
		  0.00000000011716,
		300.00001038261644,
		  0.00000000044729,
		  0.00000000358314,
		  0.00000000000587,
		300.00000059048148,
		  0.00000000002547,
		  0.00000000020402,
		  0.00000000000028,
		300.00000003138859,
		  0.00000000000136,
		  0.00000000001085,
		  0.00000000000001,
		300.00000000157650,
		  0.00000000000007,
		  0.00000000000055,
		  0.00000000000000,
		300.00000000007543,
		  0.00000000000000,
		  0.00000000000003,
		  0.00000000000000,
		300.00000000000239,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		627.75574762796759,
		  0.01273690863092,
		  0.10206135118468,
		  0.00276011419696,
		343.86690036075731,
		  0.00180502839582,
		  0.01446145355621,
		  0.00018266162473,
		304.34632343702469,
		  0.00018284133277,
		  0.00146479381731,
		  0.00001065257941,
		300.35159123530843,
		  0.00001494793223,
		  0.00011974878458,
		  0.00000056912844,
		300.02454034009725,
		  0.00000104943747,
		  0.00000840697822,
		  0.00000002836304,
		300.00153008437849,
		  0.00000006566486,
		  0.00000052603224,
		  0.00000000133526,
		300.00008723525008,
		  0.00000000375247,
		  0.00000003006036,
		  0.00000000005994,
		300.00000462394280,
		  0.00000000019922,
		  0.00000000159591,
		  0.00000000000258,
		300.00000023067122,
		  0.00000000000995,
		  0.00000000007971,
		  0.00000000000011,
		300.00000001093167,
		  0.00000000000047,
		  0.00000000000378,
		  0.00000000000000,
		300.00000000049585,
		  0.00000000000002,
		  0.00000000000017,
		  0.00000000000000,
		300.00000000001501,
		  0.00000000000000,
		  0.00000000000001,
		  0.00000000000000,
		627.75574762796759,
		  0.01273690863092,
		  0.10206135118468,
		  0.00276011419696,
		343.86690036075731,
		  0.00180502839582,
		  0.01446145355621,
		  0.00018266162473,
		304.34632343702469,
		  0.00018284133277,
		  0.00146479381731,
		  0.00001065257941,
		300.35159123530843,
		  0.00001494793223,
		  0.00011974878458,
		  0.00000056912844,
		300.02454034009725,
		  0.00000104943747,
		  0.00000840697822,
		  0.00000002836304,
		300.00153008437849,
		  0.00000006566486,
		  0.00000052603224,
		  0.00000000133526,
		300.00008723525008,
		  0.00000000375247,
		  0.00000003006036,
		  0.00000000005994,
		300.00000462394280,
		  0.00000000019922,
		  0.00000000159591,
		  0.00000000000258,
		300.00000023067122,
		  0.00000000000995,
		  0.00000000007971,
		  0.00000000000011,
		300.00000001093167,
		  0.00000000000047,
		  0.00000000000378,
		  0.00000000000000,
		300.00000000049585,
		  0.00000000000002,
		  0.00000000000017,
		  0.00000000000000,
		300.00000000001501,
		  0.00000000000000,
		  0.00000000000001,
		  0.00000000000000,
		312.31482259190221,
		  0.00050453449321,
		  0.00404225677792,
		  0.00005536308999,
		302.70011643621035,
		  0.00011346820330,
		  0.00090902854687,
		  0.00000684199609,
		300.33562755708249,
		  0.00001426256485,
		  0.00011425840563,
		  0.00000055570500,
		300.03148334364403,
		  0.00000134599136,
		  0.00001078266042,
		  0.00000003704866,
		300.00245913938591,
		  0.00000010551809,
		  0.00000084529140,
		  0.00000000217944,
		300.00016818245410,
		  0.00000000723360,
		  0.00000005794703,
		  0.00000000011716,
		300.00001038261644,
		  0.00000000044729,
		  0.00000000358314,
		  0.00000000000587,
		300.00000059048148,
		  0.00000000002547,
		  0.00000000020402,
		  0.00000000000028,
		300.00000003138859,
		  0.00000000000136,
		  0.00000000001085,
		  0.00000000000001,
		300.00000000157650,
		  0.00000000000007,
		  0.00000000000055,
		  0.00000000000000,
		300.00000000007543,
		  0.00000000000000,
		  0.00000000000003,
		  0.00000000000000,
		300.00000000000239,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.73567068555610,
		  0.00003083372043,
		  0.00024702012259,
		  0.00000201625345,
		300.21076574271092,
		  0.00000895151378,
		  0.00007171130939,
		  0.00000035831707,
		300.03069393162292,
		  0.00000131194514,
		  0.00001050992430,
		  0.00000003667239,
		300.00323974086535,
		  0.00000013899573,
		  0.00000111347665,
		  0.00000000290260,
		300.00027865947010,
		  0.00000001198435,
		  0.00000009600444,
		  0.00000000019582,
		300.00002070213020,
		  0.00000000089181,
		  0.00000000714413,
		  0.00000000001180,
		300.00000137513950,
		  0.00000000005931,
		  0.00000000047511,
		  0.00000000000065,
		300.00000008355101,
		  0.00000000000361,
		  0.00000000002889,
		  0.00000000000003,
		300.00000000471829,
		  0.00000000000020,
		  0.00000000000163,
		  0.00000000000000,
		300.00000000025057,
		  0.00000000000001,
		  0.00000000000009,
		  0.00000000000000,
		300.00000000001262,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000040,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000
      };//end return
    }else{
      std::cout << "returning empty true solution" << std::endl;
      return {};
    }
  }//get
};//struct


template <>
struct NonLinAdvDiffReacFlame2dImpGoldStates<ode::ImplicitEnum::BDF2>{
  using result_t = std::vector<double>;

  static result_t get(int Nx, int Ny,
		      double dt, double final_t){
    if(Nx==12 and Ny==6 and
       std::abs(dt-0.0001)<1e-6 and
       std::abs(final_t-0.001)<1e-6)
      {
	return{
		300.65689879013456,
		  0.00002777162385,
		  0.00022248344370,
		  0.00000135465224,
		300.15718624891042,
		  0.00000672111486,
		  0.00005384244879,
		  0.00000018308959,
		300.01878339261168,
		  0.00000080729255,
		  0.00000646708575,
		  0.00000001418122,
		300.00159408830530,
		  0.00000006870800,
		  0.00000055040427,
		  0.00000000083941,
		300.00010846611332,
		  0.00000000468325,
		  0.00000003751627,
		  0.00000000004191,
		300.00000629500062,
		  0.00000000027211,
		  0.00000000217980,
		  0.00000000000185,
		300.00000032352477,
		  0.00000000001400,
		  0.00000000011212,
		  0.00000000000007,
		300.00000001509773,
		  0.00000000000065,
		  0.00000000000524,
		  0.00000000000000,
		300.00000000065103,
		  0.00000000000003,
		  0.00000000000023,
		  0.00000000000000,
		300.00000000002615,
		  0.00000000000000,
		  0.00000000000001,
		  0.00000000000000,
		300.00000000000102,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		312.04995772830159,
		  0.00049835759862,
		  0.00399266629239,
		  0.00004547018224,
		302.33159760982659,
		  0.00009877159192,
		  0.00079127266994,
		  0.00000443784469,
		300.24612888722754,
		  0.00001052828587,
		  0.00008434138246,
		  0.00000027909499,
		300.01901972617554,
		  0.00000081756614,
		  0.00000654938333,
		  0.00000001414334,
		300.00119619786778,
		  0.00000005156184,
		  0.00000041305012,
		  0.00000000062317,
		300.00006474875744,
		  0.00000000279578,
		  0.00000002239622,
		  0.00000000002481,
		300.00000312276455,
		  0.00000000013499,
		  0.00000000108136,
		  0.00000000000091,
		300.00000013738372,
		  0.00000000000594,
		  0.00000000004761,
		  0.00000000000003,
		300.00000000560726,
		  0.00000000000024,
		  0.00000000000194,
		  0.00000000000000,
		300.00000000021492,
		  0.00000000000001,
		  0.00000000000007,
		  0.00000000000000,
		300.00000000000779,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000017,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		633.65519662953284,
		  0.01303987927996,
		  0.10448736946116,
		  0.00267257135118,
		342.02614011007495,
		  0.00174474487441,
		  0.01397814024604,
		  0.00014621658477,
		303.69541225273633,
		  0.00015667396647,
		  0.00125513376741,
		  0.00000679501467,
		300.25405691466722,
		  0.00001087092529,
		  0.00008708617010,
		  0.00000028154300,
		300.01460252507826,
		  0.00000062779674,
		  0.00000502917080,
		  0.00000001066366,
		300.00073251956809,
		  0.00000003157825,
		  0.00000025296607,
		  0.00000000037574,
		300.00003302270107,
		  0.00000000142598,
		  0.00000001142311,
		  0.00000000001248,
		300.00000136605877,
		  0.00000000005905,
		  0.00000000047307,
		  0.00000000000039,
		300.00000005266122,
		  0.00000000000228,
		  0.00000000001825,
		  0.00000000000001,
		300.00000000191409,
		  0.00000000000008,
		  0.00000000000066,
		  0.00000000000000,
		300.00000000006617,
		  0.00000000000000,
		  0.00000000000002,
		  0.00000000000000,
		300.00000000000142,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		633.65519662953284,
		  0.01303987927996,
		  0.10448736946116,
		  0.00267257135118,
		342.02614011007495,
		  0.00174474487441,
		  0.01397814024604,
		  0.00014621658477,
		303.69541225273633,
		  0.00015667396647,
		  0.00125513376741,
		  0.00000679501467,
		300.25405691466722,
		  0.00001087092529,
		  0.00008708617010,
		  0.00000028154300,
		300.01460252507826,
		  0.00000062779674,
		  0.00000502917080,
		  0.00000001066366,
		300.00073251956809,
		  0.00000003157825,
		  0.00000025296607,
		  0.00000000037574,
		300.00003302270107,
		  0.00000000142598,
		  0.00000001142311,
		  0.00000000001248,
		300.00000136605877,
		  0.00000000005905,
		  0.00000000047307,
		  0.00000000000039,
		300.00000005266122,
		  0.00000000000228,
		  0.00000000001825,
		  0.00000000000001,
		300.00000000191409,
		  0.00000000000008,
		  0.00000000000066,
		  0.00000000000000,
		300.00000000006617,
		  0.00000000000000,
		  0.00000000000002,
		  0.00000000000000,
		300.00000000000142,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		312.04995772830159,
		  0.00049835759862,
		  0.00399266629239,
		  0.00004547018224,
		302.33159760982659,
		  0.00009877159192,
		  0.00079127266994,
		  0.00000443784469,
		300.24612888722754,
		  0.00001052828587,
		  0.00008434138246,
		  0.00000027909499,
		300.01901972617554,
		  0.00000081756614,
		  0.00000654938333,
		  0.00000001414334,
		300.00119619786778,
		  0.00000005156184,
		  0.00000041305012,
		  0.00000000062317,
		300.00006474875744,
		  0.00000000279578,
		  0.00000002239622,
		  0.00000000002481,
		300.00000312276455,
		  0.00000000013499,
		  0.00000000108136,
		  0.00000000000091,
		300.00000013738372,
		  0.00000000000594,
		  0.00000000004761,
		  0.00000000000003,
		300.00000000560726,
		  0.00000000000024,
		  0.00000000000194,
		  0.00000000000000,
		300.00000000021492,
		  0.00000000000001,
		  0.00000000000007,
		  0.00000000000000,
		300.00000000000779,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000017,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.65689879013456,
		  0.00002777162385,
		  0.00022248344370,
		  0.00000135465224,
		300.15718624891042,
		  0.00000672111486,
		  0.00005384244879,
		  0.00000018308959,
		300.01878339261168,
		  0.00000080729255,
		  0.00000646708575,
		  0.00000001418122,
		300.00159408830530,
		  0.00000006870800,
		  0.00000055040427,
		  0.00000000083941,
		300.00010846611332,
		  0.00000000468325,
		  0.00000003751627,
		  0.00000000004191,
		300.00000629500062,
		  0.00000000027211,
		  0.00000000217980,
		  0.00000000000185,
		300.00000032352477,
		  0.00000000001400,
		  0.00000000011212,
		  0.00000000000007,
		300.00000001509773,
		  0.00000000000065,
		  0.00000000000524,
		  0.00000000000000,
		300.00000000065103,
		  0.00000000000003,
		  0.00000000000023,
		  0.00000000000000,
		300.00000000002615,
		  0.00000000000000,
		  0.00000000000001,
		  0.00000000000000,
		300.00000000000102,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		300.00000000000000,
		  0.00000000000000,
		  0.00000000000000,
		  0.00000000000000
	};//end return
    }else{
      std::cout << "returning empty true solution" << std::endl;
      return {};
    }
  }//get
};//struct

}}}//end namespace rompp::apps::test
#endif

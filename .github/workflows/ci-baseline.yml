name: github-Linux-baseline

on:
  pull_request:
    types: [ opened, reopened, synchronize ]
    paths-ignore:
    - 'logos/**'
    - 'helper_scripts/**'
    - 'docker_scripts/**'
    - 'docs/**'
    - '**/*.md'
  push: # for direct quick fixes
    branches:
      - 'main'
      - 'develop'
    paths-ignore:
    - 'logos/**'
    - 'helper_scripts/**'
    - 'docker_scripts/**'
    - 'docs/**'
    - '**/*.md'

concurrency:
  group: ${ {github.event_name }}-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{github.event_name == 'pull_request'}}

jobs:
  CI:
    name: baseline
    continue-on-error: false
    strategy:
      fail-fast: false
      matrix:
        image:
          - fedora-clang
          - fedora-gnu
          - ubuntu-clang
          - ubuntu-gnu
          #- intel-oneapi
        build_type:
          - Release
          - Debug
        cmake_extra_args:
          - ''
        include:
          - image: ubuntu-gnu
            build_type: Release
            cmake_extra_args: '-D CMAKE_CXX_STANDARD=20 -D PRESSIO_ENABLE_CXX20=ON'
          - image: ubuntu-clang
            build_type: Release
            cmake_extra_args: '-D CMAKE_CXX_STANDARD=20 -D PRESSIO_ENABLE_CXX20=ON'
          - image: fedora-gnu
            build_type: Release
            cmake_extra_args: '-D CMAKE_CXX_STANDARD=20 -D PRESSIO_ENABLE_CXX20=ON'
          - image: fedora-clang
            build_type: Release
            cmake_extra_args: '-D CMAKE_CXX_STANDARD=20 -D PRESSIO_ENABLE_CXX20=ON'

    runs-on: ubuntu-latest
    container:
      image: ghcr.io/pressio/${{ matrix.image }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.github_token }}
    env:
      num_cpus: 2 # $(cat /proc/cpuinfo | grep processor -c)

    steps:
      - uses: actions/checkout@v4

      - name: Checkout pressio examples
        uses: actions/checkout@v4
        with:
          repository: Pressio/pressio-templates-usage-as-library
          path: examples

      - name: Example - include only
        working-directory: examples
        run: |
          $CXX \
            -DPRESSIO_ENABLE_TPL_EIGEN \
            -I../include               \
            -c main.cpp                \
          && $CXX -o pressio-example main.o \
          && ./pressio-example

      - name: Example - include only with embedded definitions
        working-directory: examples
        run: |
          $CXX \
            -I../include               \
            -c main_with_defines.cpp   \
          && $CXX -o pressio-example main.o \
          && ./pressio-example

      - name: Configure
        run: |
          cmake -B builddir \
            -D CMAKE_BUILD_TYPE:STRING=${{ matrix.build_type }} \
            -D CMAKE_C_COMPILER=$CC \
            -D CMAKE_CXX_COMPILER=$CXX \
            -D CMAKE_CXX_FLAGS='' \
            -D CMAKE_INSTALL_PREFIX:PATH=../install \
            -D CMAKE_VERBOSE_MAKEFILE:BOOL=ON \
            ${{ matrix.cmake_extra_args }} \
            -D PRESSIO_ENABLE_DEBUG_PRINT=ON \
            -D PRESSIO_ENABLE_TESTS:BOOL=ON \
            -D PRESSIO_ENABLE_TPL_EIGEN:BOOL=ON

      - name: Build
        run: |
          cmake --build builddir --target install

      - name: Example - CMake installed
        working-directory: examples/cmake_find_package
        run: |
          cmake -B builddir \
            -DCMAKE_PREFIX_PATH=../../install \
          && cmake --build builddir           \
          && ./builddir/pressio-example

      - name: Example - CMake add_subdirectory
        working-directory: examples/cmake_add_subdirectory
        run: |
          cmake -B builddir \
          && cmake --build builddir            \
          && ./builddir/pressio-example

      - name: Example - CMake include_directories
        working-directory: examples/cmake_include_directories
        run: |
          cmake -B builddir \
          && cmake --build builddir            \
          && ./builddir/pressio-example

      - name: Run small tests
        working-directory: builddir/tests/functional_small
        run: |
          ctest -j $num_cpus --output-on-failure

      - name: Run medium tests
        working-directory: builddir/tests/functional_medium
        run: |
          ctest -j $num_cpus --output-on-failure

      - name: Run large tests
        working-directory: builddir/tests/functional_large
        run: |
          ctest -j $num_cpus --output-on-failure
